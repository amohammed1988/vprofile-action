name: vprofile Actions  # Name of the workflow
on:
  workflow_dispatch  # Triggered manually
env:  # Environment variables
  AWS_REGION: us-east-2  # AWS region
  ECR_REPOSITORY: flintmoh  # ECR repository name
  EKS_CLUSTER: flintmoh-eks  # EKS cluster name

jobs:
  Testing:  # Job for testing
    runs-on: ubuntu-latest  # Runs on the latest version of Ubuntu
    steps:  # List of steps for the job
      - name: Checkout code  # Checkout the code from the repository
        uses: actions/checkout@v4  # Use the v4 version of the checkout action

      - name: Maven test  # Run Maven tests
        run: mvn test

      - name: Checkstyle  # Run Checkstyle
        run: mvn checkstyle:checkstyle

      - name: Set up Java 11  # Set up Java 11 environment
        uses: actions/setup-java@v3  # Use the v3 version of the setup-java action
        with:
          distribution: 'temurin'  # Use Temurin JDK
          java-version: '11'  # Use Java 11

      - name: Set up Sonar Scanner  # Set up Sonar Scanner
        uses: warchant/setup-sonar-scanner@v7  # Use the v7 version of the setup-sonar-scanner action

      - name: SonarQube Scan  # Run SonarQube scan
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION_NAME }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src/ \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.java.checkstyle.reportsPath=target/checkstyle-result.xml \
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

      - name: SonarQube Quality Gate Check  # Check SonarQube quality gate
        id: sonarqube-quality-gate-check  # Unique identifier for this step
        uses: sonarsource/sonarqube-quality-gate-action@master  # Use the master version of the sonarqube-quality-gate-action
        timeout-minutes: 5  # Maximum execution time for this step (in minutes)
        env:  # Environment variables
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # SonarQube token
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}  # SonarQube server URL

  BUILD_AND_PUBLISH:  # Job for building and publishing
    needs: Testing  # Dependency on the 'Testing' job
    runs-on: ubuntu-latest  # Runs on the latest version of Ubuntu
    steps:  # List of steps for the job
      - name: Code Checkout  # Checkout the code from the repository
        uses: actions/checkout@v4  # Use the v4 version of the checkout action
      
      - name: Build & Upload image to ECR  # Build and upload image to ECR
        uses: appleboy/docker-ecr-action@master  # Use the master version of the docker-ecr-action
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS access key ID
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS secret access key
          registry: ${{ secrets.REGISTRY }}  # Docker registry
          repo: ${{ env.ECR_REPOSITORY }}  # ECR repository name
          region: ${{ env.AWS_REGION }}  # AWS region
          tags: latest,${{ github.run_number }}  # Image tags
          daemon_off: false  # Enable Docker daemon
          dockerfile: ./Dockerfile  # Path to Dockerfile
          context: ./  # Build context
